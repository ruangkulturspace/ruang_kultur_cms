{
	"Import Moment Package": {
		"scope": "javascript,typescript",
		"prefix": "impmom",
		"body": ["import moment from 'moment';"],
		"description": "Import Moment Package"
	},
	"Import Head NextJS": {
		"scope": "javascript,typescript",
		"prefix": "imphead",
		"body": ["import Head from \"next/head\";"],
		"description": "Import Head NextJS"
	},
	"Use Head NextJS": {
		"scope": "jsx",
		"prefix": "<Head",
		"body": ["<Head>", "\t ${1}", "</Head>"],
		"description": "Use Head NextJS"
	},
	"Add Custom CSS": {
		"scope": "jsx",
		"prefix": "<link",
		"body": ["<link rel=\"stylesheet\" href=\"${1}\" />"],
		"description": "Add Custom CSS"
	},
	"Use Col": {
		"scope": "jsx",
		"prefix": "<Col",
		"body": ["<Col xs={$1} sm={$1} md={$1} lg={$1} >", "\t ${2}", "</Col>"],
		"description": "Use Col"
	},
	"Add Classname": {
		"prefix": "cl",
		"body": ["className=\"$1\""],
		"description": "Add classname"
	},
	"Use Row": {
		"scope": "jsx",
		"prefix": "<Row",
		"body": ["<Row >", "\t ${1}", "</Row>"],
		"description": "Use Row"
	},
	"Color White": {
		"scope": "css",
		"prefix": "colWhite",
		"body": ["#fff;"],
		"description": "Color White"
	},
	"Fetching": {
		"scope": "jsx",
		"prefix": "FetcherBoy",
		"body": [
			"const FetchWat = async (",
			"\tpage = 1,",
			"\tlimit = paginationTable1.pageSize,",
			") => {",
			"\tsetLoadingTable1(true);",
			"",
			"\tvar params = {",
			"\t\tpage: page,",
			"\t\tlimit: limit,",
			"\t}",
			"",
			"\tif (searchWord != '') {",
			"\t\tparams.search = searchWord;",
			"\t}",
			"",
			"\tconst datar = await FetcherGet(process.env.backendNew + '/site/list', {",
			"\t\tparams: params",
			"\t});",
			"",
			"\tsetPaginationTable1({",
			"\t\tcurrent: datar.data.data.page,",
			"\t\tpageSize: limit,",
			"\t\ttotal: datar.data.data.totalDocs,",
			"\t});",
			"\tsetTable1(datar.data.data.docs);",
			"\tsetLoadingTable1(false);",
			"};",
		],
		"description": "builder for hook component"
	},
	"ConstPage": {
		"scope": "jsx",
		"prefix": "<ConstPage",
		"body": [
			"import { useEffect, useState } from \"react\";",
			"import { Table, Spin, Tag, Button, Modal, DatePicker, Row, Col, notification, Card, Form, Input, Menu, Dropdown } from 'antd';",
			"import moment from 'moment';",
			"import Head from 'next/head';",
			"",
			"",
			"const ${NewPage}${1} = () => {",
			"",
			"\treturn (",
			"\t\t<>",
			"\t\t\t ${2}",
			"\t\t</>",
			"\t)",
			"}",
			"export default ${NewPage}${1};"
		],
		"description": "builder for hook component"
	},
	"TableAntd": {
		"scope": "jsx",
		"prefix": "<TableAntd",
		"body": [
			"//move this to state:",
			"const [table1, setTable1] = useState([]);",
			"const [loadingTable1, setLoadingTable1] = useState(false);",
			"const [paginationTable1, setPaginationTable1] = useState({",
				"\tcurrent: 1,",
				"\tpageSize: 10,",
				"\ttotal: 0,",
			"});",
			"",
			"//move this to function area:",
			"const handleChangeTable1 = async (paginationA, filtersA, sorterA) => {",
				"\tconst pager = { ...paginationTable1 };",
				"\tpager.current = paginationA.current;",
				"\tsetPaginationTable1(pager);",
			"};",
			"",
			"<Table",
				"\tclassName=\"components-table-demo-nested\"",
				"\tdataSource={table1}",
				"\tscroll={{ x: '100%' }}",
				"\tonChange={handleChangeTable1}",
				"\tpagination={paginationTable1}",
				"\tloading={loadingTable1}",
				"\tfooter={() => (",
					"\t\t<div className=\"footer-text\">",
						"\t\t{paginationTable1.current * paginationTable1.pageSize >",
							"\t\t\tpaginationTable1.total",
							"\t\t\t? `Showing ${paginationTable1.total} of ${paginationTable1.total} entries`",
							"\t\t\t: `Showing ${paginationTable1.current * paginationTable1.pageSize",
							"\t\t\t} of ${paginationTable1.total} entries`}",
					"\t\t</div>",
				"\t\t)}",
			"\t>",
			"",
			"<Table.Column",
				"\ttitle=\"No\"",
				"\tkey=\"index\"",
				"\twidth=\"5%\"",
				"\trender={(value, item, index) =>",
					"\t\t(paginationTable1.current - 1) * paginationTable1.pageSize +",
					"\t\tindex +",
					"\t\t1",
				"\t}",
			"/>",
			"",
				"<Table.Column",
					"\ttitle=\"Site ID\"",
					"\tdataIndex=\"site_id\"",
					"\trender={(value, item, index) => value}",
				"/>",
			"",
			"",
				"</Table>"
		],
		"description": "builder for hook component"
	}
}
